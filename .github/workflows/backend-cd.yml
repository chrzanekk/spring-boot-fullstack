#name: CD - Deploy Backend
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - main
#    paths:
#      - backend/**
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:16.3
#        env:
#          POSTGRES_USER: test
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: customer
#        ports:
#          - 5444:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    defaults:
#      run:
#        working-directory: ./backend
#    steps:
##      todo fix this in future if needed
##      - name: Send Slack Message
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":"Deployment started :progress_bar: :fingerscrossed:"}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: 'maven'
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
##      todo fix this in future if needed
##      - name: Send Slack Message
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":":maven: Building with Maven"}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}
#
#      - name: Set build number
#        id: build-number
#        run: echo "BUILD_NUMBER=$(date '+%Y.%m.%d.%H.%M.%S')" >> $GITHUB_OUTPUT
#
#      - name: Build Package Push with Maven
#        run: mvn -ntp -B verify -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build
#
#      - name: Update dockerrun.aws.json api image tag with new build number
#        run: |
#          echo "Dockerrun.aws.json before updating tag"
#          cat ../Dockerrun.aws.json
#          sed -i -E 's_(chrzanekk/backend:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' ../Dockerrun.aws.json
#          echo "Dockerrun.aws.json after updating tag"
#          cat ../Dockerrun.aws.json
#
##      todo fix this in future if needed
##      - name: Send Slack Message
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":":aws: Starting deployment to Elastic Beanstalk"}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}
#
#      - name: Deploy to Elastic Beanstalk
#        uses: einaregilsson/beanstalk-deploy@v22
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_KEY_ID }}
#          application_name: ${{ secrets.EB_APPLICATION_NAME }}
#          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
#          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
#          version_description: ${{ github.SHA }}
#          region: ${{ secrets.EB_REGION }}
#          deployment_package: Dockerrun.aws.json
#          wait_for_environment_recovery: 120
#        continue-on-error: ${{ matrix.attempt != 3 }}
#
##      todo fix this in future if needed
##      - name: Send Slack Message
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":":githubloading: Commitin to repo https://github.com/chrzanekk/spring-boot-fullstack"}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}
#
#      - name: Commit and push Dockerrun.aws.json
#        run: |
#          git config user.name github-actions
#          git config user.email github-actions@github.com
#          git add ../Dockerrun.aws.json
#          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
#          git push
#
##      todo fix this in future if needed
##      - name: Send Slack Message
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":" Deployment and commit completed: :github_ckeck_mark: :party_blob: "}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}
##
##      - name: Send Slack Message
##        if: always()
##        run: >
##          curl && curl -X POST -H 'Content-type: application/json'
##          --data '
##          {"text":"Job Status ${{ job.status }} "}
##          '
##          ${{ secrets.SLACK_WEBHOOK_URL }}


name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: password
          POSTGRES_DB: customer
        ports:
          - 5444:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5  

    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image with Jib
        run: mvn clean install jib:build -Ddocker.username=${{ secrets.DOCKER_USERNAME }} -Ddocker.password=${{ secrets.DOCKER_PASSWORD }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}


      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          source: "docker-compose.yml"
          target: "/home/debian/app"
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}

      - name: SSH to VPS and Deploy Backend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            cd /home/debian/app
            docker-compose down
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker-compose up -d
